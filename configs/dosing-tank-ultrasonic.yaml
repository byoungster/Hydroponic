# ============================================================================
# ESPHome Dosing Tank Water Level Monitor with OLED Display
# ============================================================================
#
# This configuration monitors water levels in a hydroponic dosing tank using
# an ultrasonic sensor and displays the information on a local OLED screen
# and in Home Assistant.
#
# Hardware Bill of Materials (BOM):
# ---------------------------------
# 1. Ultrasonic Sensor: PWM DC5V Ultrasonic ranging Sensor ultrasonic
#    Waterproof Distance sensors Waterproof Probe PWM ultrasonic Sensor Module
#    Price: ~$20 (Amazon)
#
# 2. Microcontroller: WeMos D1 Mini V4.0.0 Type-C USB WiFi IoT Board
#    Based ESP8266 4MB Compatible with Arduino MicroPython Nodemcu
#    Price: ~$26 for 10pcs (~$2.60 each) (Amazon)
#
# 3. OLED Display: Dorhea 6PCS 0.96" OLED Display Module 12864 128x64 Pixel
#    LCD Yellow Blue SSD1306 Driver Board I2C Serial (Amazon ASIN: B07WPCPM5H)
#    Price: ~$18 for 6pcs (~$3 each) (Amazon)
#
# 4. Jumper Cables: ELEGOO 120pcs Multicolored Dupont Wire 40pin Male to Female,
#    40pin Male to Male, 40pin Female to Female Breadboard Jumper Ribbon Cables Kit
#    Price: ~$7 (reusable across projects) (Amazon)
#
# Total cost per complete sensor unit: ~$26 ($20 sensor + $2.60 D1 Mini + $3 OLED)
# Note: Jumper cables are reusable across multiple projects
#
# Wiring Connections:
# -------------------
# A02YYUW Ultrasonic Sensor to D1 Mini:
# Wire Colors: Red (Pin 1), Black (Pin 2), Yellow (Pin 3), White (Pin 4)
#   - Red (VCC)     -> D1 Mini 5V
#   - Black (GND)   -> D1 Mini GND
#   - Yellow (RX)   -> D1 Mini D1 (GPIO5)
#   - White (TX)    -> D1 Mini D2 (GPIO4)
#
# OLED Display to D1 Mini (I2C):
#   - OLED VCC      -> D1 Mini 5V
#   - OLED GND      -> D1 Mini GND
#   - OLED SDA      -> D1 Mini D3 (GPIO0)
#   - OLED SCL      -> D1 Mini D4 (GPIO2)
#
# Tank Configuration:
# -------------------
# Physical Tank: 27 gallon capacity
# Monitored Range: 0-20 gallons (max fill stops at 20 gal, leaving 7 gal headspace at top)
# Empty (0 gal) Reading: 13.5 inches from sensor
# Half Full (10 gal) Reading: 5.2 inches from sensor
#
# Features:
# ---------
# - Real-time water level monitoring via ultrasonic sensor
# - Local OLED display showing gallons, percentage, and visual bar
# - Home Assistant integration via API
# - Smart outlier rejection (filters sensor noise)
# - OTA (Over-The-Air) updates
# - WiFi connectivity
#
# ============================================================================

esp8266:
  board: d1_mini

esphome:
  name: dosing-tank-ultrasonic
  friendly_name: Dosing Tank Ultrasonic

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_password_iot
  fast_connect: True

captive_portal:

# I2C configuration for the OLED display
i2c:
  sda: D3
  scl: D4
  frequency: 400kHz
  scan: true
  id: bus_a

# Define fonts for the display
font:
  - file: "gfonts://Roboto"
    id: roboto_small
    size: 10
  - file: "gfonts://Roboto"
    id: roboto_medium
    size: 14
  - file: "gfonts://Roboto"
    id: roboto_large
    size: 20

# Define colors for the display
color:
  - id: white_color
    red: 100%
    green: 100%
    blue: 100%

# SSD1306 I2C OLED Display
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: D0
    address: 0x3C
    lambda: |-
      // Title
      it.print(0, 0, id(roboto_small), "DOSING TANK");

      // Draw a line separator
      it.line(0, 12, 128, 12);

      // Water level in gallons (large, centered)
      if (id(water_level_gallons).has_state()) {
        it.printf(40, 24, id(roboto_large), TextAlign::CENTER, "%.1f gal", id(water_level_gallons).state);
      }

      // Percentage readout next to gallons
      if (id(water_level_percent).has_state()) {
        it.printf(100, 32, id(roboto_medium), TextAlign::CENTER, "%.0f%%", id(water_level_percent).state);
      }

      // Percentage bar at bottom
      it.rectangle(0, 54, 128, 8);

      // Percentage fill (proportional width)
      if (id(water_level_percent).has_state()) {
        float percent = id(water_level_percent).state;
        int bar_width = (int)(percent * 1.28);  // 128 pixels * percent/100
        it.filled_rectangle(0, 54, bar_width, 8);
      }

# Example configuration entry for ultrasonic sensor
sensor:
  - platform: ultrasonic
    #name: "Ultrasonic Sensor"
    id: distance
    trigger_pin: D1
    echo_pin: D2
    update_interval: 1s
    pulse_time: 10us
    timeout: 6m
    filters:
      # Clamp filter first - constrains values to expected physical range (meters)
      - clamp:
          min_value: 0.12
          max_value: 0.37
          ignore_out_of_range: true
      # Smart outlier rejection: rejects readings >20% different from last valid value
      - lambda: |-
          static float last_valid = NAN;

          if (isnan(last_valid)) {
            // First run: accept the value
            last_valid = x;
            return x;
          } else {
            // Check if reading is within 20% of last valid value
            float percent_diff = fabs(x - last_valid) / last_valid * 100.0;
            if (percent_diff <= 20.0) {
              last_valid = x;
              return x;
            }
          }

          return last_valid;  // Return last valid value instead of empty

  # this is a template function to convert meters to inches
  - platform: template
    name: "distance_inches"
    unit_of_measurement: "in"
    lambda: |-
      return (id(distance).state) * 39.3701;
    update_interval: 1s

  # Calculate gallons based on distance (inches)
  - platform: template
    name: "water_level_gallons"
    id: water_level_gallons  # Add this ID
    unit_of_measurement: "gal"
    accuracy_decimals: 1
    lambda: |-
      return id(distance).state * 39.3701;
    filters:
      - calibrate_linear:
          - 13.5 -> 0    # Empty tank
          - 5.2 -> 10    # 10 gallons
    update_interval: 1s

  # Calculate percentage full (0-100%)
  - platform: template
    name: "water_level_percent"
    id: water_level_percent
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: |-
      float gallons = id(water_level_gallons).state;
      return (gallons / 20.0) * 100.0;
    filters:
      # Clamp percentage to valid range
      - clamp:
          min_value: 0
          max_value: 100
    update_interval: 1s
